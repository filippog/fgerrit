#!/usr/bin/env python

import optparse
import os
import subprocess
import urlparse

from fgerrit import FGerrit, get_message, normalize_score, VALID_SCORES


class GerritCMD(object):

    def __init__(self):
        self.verbose = True

    def get_gerrit_url(self):
        cmd = ['git', 'config', '--get', 'remote.gerrit.url']
        run = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        gurl = run.stdout.readline().strip()
        if gurl:
            if gurl.endswith('.git'):
                return urlparse.urlparse(gurl[:-4])
            else:
                return urlparse.urlparse(gurl)
        else:
            try:
                gurl = os.environ['GERRIT_URL']
                if gurl.endswith('.git'):
                    return urlparse.urlparse(gurl[:-4])
                else:
                    return urlparse.urlparse(gurl)
            except KeyError:
                return None

    def get_default_branches(self):
        cmd = ['git', 'config', '--get', 'fgerrit.branches']
        run = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        branches = run.stdout.readline().strip()
        if run.returncode == "1":
            branches = "master"
        return branches

    def main(self):
        usage = '''
%prog: [options] [<command> [<arguments>]]

Gerrit information defaults to gerrit remote url in git config or the
GERRIT_URL env. The options --host, --user, --port, --project will override
these defaults.

Examples:
    List all pending reviews:  %prog
           View review 7b251:  %prog 7b251
        To -1 patchset 7b251:  %prog 7b251 -1

Avaliable Commands:
    <nothing>                lists pending reviews
    mark                     touches the file in .fgerrit-mark which is used by
                             the above listing to only show newer changes
    <id>                     shows review information
    <id> show                like git-show but for the patch set <id>,
                             note that this will change your FETCH_HEAD
    <id> checkout [patch#]   checks out the code for a review; the optional
                             [patch#] lets you checkout a specific patchset
                             note that this will change your FETCH_HEAD
    <id> diffsince [patch#]  shows a diff of what you have checked out locally
                             vs. the code at <id>
                             [patch#] lets you diff a specific patchset
                             note that this will change your FETCH_HEAD
    <id> post     [message]  posts a message to a review
    <id> -2       [message]  indicates a strong "do not merge" opinion
    <id> -1       [message]  indicates a normal "do not merge" opinion
    <id>  0       [message]  indicates a neutral opinion
    <id> +1       [message]  indicates a non-core-reviewr positive opinion
    <id> +2       [message]  indicates a core-reviewer positive opinion
    <id> approve  [message]  requests the change be merged
    <id> recheck             asks for the change to be rechecked
    <id> reverify            asks for the change to be reverified
    <id> draft    [message]  indicates the change is a work-in-progress
    <id> abandon  [message]  requests the change be removed from review
    <id> delete   [message]  requests the change be removed from the system
    <id> restore             requests the change be restored for review
         submit              submits the current branch for review
         draft               submits the current branch as a work-in-progress

If [message] is not specified, your $FGERRIT_EDITOR or $EDITOR will be loaded
up for you create a message. If you save an empty message, the command will be
aborted. You can use a single dash as the message if you truly want no message.
        '''.strip()
        args = optparse.OptionParser(usage)
        args.add_option('--host', default=None, help="Gerrit hostname or ip")
        args.add_option('--port', default=None, help="Gerrit port")
        args.add_option('--user', default=None, help="Gerrit user")
        args.add_option('--project', default=None, help="Gerrit project")
        args.add_option(
            '--wip', action='store_true',
            help="Include works-in-progress in the listing of pending reviews")
        args.add_option(
            '--branches', default=self.get_default_branches(),
            help="The branch names to include in the listing of pending "
                 "reviews; defaults to 'fgerrit.branches' git config or master.")
        args.disable_interspersed_args()
        options, arguments = args.parse_args()

        gerrit_user = None
        gerrit_host = None
        gerrit_port = None
        gerrit_project = None

        gurl = self.get_gerrit_url()
        if gurl:
            if gurl.netloc.count('@'):
                gerrit_user = gurl.netloc.split('@')[0]
                if gurl.netloc.count(':'):
                    gerrit_host = gurl.netloc.split('@')[1].split(':')[0]
                    gerrit_port = gurl.netloc.split('@')[1].split(':')[1]
                else:
                    gerrit_host = gurl.netloc.split('@')[1]
            else:
                gerrit_host = gurl.netloc.split(':')[0]
                gerrit_port = gurl.netloc.split(':')[1]
            gerrit_project = gurl.path.strip('/')

        if options.user:
            gerrit_user = options.user
        if options.host:
            gerrit_host = options.host
        if options.port:
            gerrit_port = options.port
        if options.project:
            gerrit_project = options.project

        if not gerrit_user:
            args.error(
                "Couldn't find gerrit user in git config, env, or in args")
        if not gerrit_host:
            args.error(
                "Couldn't find gerrit host in git config, env, or in args")
        if not gerrit_port:
            args.error(
                "Couldn't find gerrit port in git config, env, or in args")
        if not gerrit_project:
            args.error(
                "Couldn't find gerrit project in git config, env, or in args")

        fgerrit = FGerrit(ssh_user=gerrit_user, ssh_host=gerrit_host,
                          project=gerrit_project, ssh_port=int(gerrit_port),
                          status="open")
        if not arguments:
            fgerrit.print_reviews_list(
                fgerrit.list_reviews(), show_wip=options.wip,
                branches=options.branches.split(','))
        elif arguments[0] == 'mark':
            open('.fgerrit-mark', 'w')
        elif arguments[0] == 'submit':
            command = arguments.pop(0)
            if arguments:
                args.error('%s takes no arguments' % command)
            fgerrit.submit()
        elif arguments[0] == 'draft':
            command = arguments.pop(0)
            if arguments:
                args.error('%s takes no arguments' % command)
            fgerrit.draft()
        else:
            change_id = arguments.pop(0)
            if not arguments:
                fgerrit.print_review(change_id)
            else:
                command = arguments.pop(0)
                if command == 'show':
                    if arguments:
                        args.error('<id> %s' % command)
                    fgerrit.show(change_id)
                elif command == 'checkout':
                    patchset_number = None
                    if arguments:
                        patchset_number = arguments.pop(0)
                    if arguments:
                        args.error('<id> %s [patchset#]' % command)
                    fgerrit.checkout(change_id, patchset_number)
                elif command == 'diffsince':
                    patchset_number = None
                    if arguments:
                        patchset_number = arguments.pop(0)
                    if arguments:
                        args.error('<id> %s [patchset#]' % command)
                    fgerrit.diffsince(change_id, patchset_number)
                elif command == 'post':
                    message = arguments.pop(0) if arguments else ''
                    if message in VALID_SCORES:
                        score = message
                        message = arguments.pop(0) if arguments else ''
                        if arguments:
                            args.error('<id> %s [<message>]' % command)
                        message = get_message(message)
                        fgerrit.code_review(review_id, score, message)
                    else:
                        if arguments:
                            args.error('<id> %s [<message>]' % command)
                        message = get_message(message)
                        fgerrit.post_message(change_id, message)
                elif command in VALID_SCORES:
                    score = normalize_score(command)
                    message = arguments.pop(0) if arguments else ''
                    if arguments:
                        args.error('<id> %s [<message>]' % command)
                    message = get_message(message)
                    fgerrit.code_review(change_id, score, message)
                elif command in ('approve', 'approved'):
                    if arguments:
                        args.error('<id> %s [<message>]' % command)
                    message = arguments.pop(0) if arguments else ''
                    message = get_message(message)
                    # Send a +2 first
                    fgerrit.code_review(change_id, "+2", message)
                    fgerrit.approve_review(change_id, "+1")
                elif command in ('recheck'):
                    if arguments:
                        args.error('<id> %s' % command)
                    fgerrit.post_message(change_id, "recheck no bug")
                elif command in ('reverify'):
                    if arguments:
                        args.error('<id> %s' % command)
                    fgerrit.post_message(change_id, "reverify no bug")
                elif command in ('draft', 'drafted'):
                    if arguments:
                        args.error('<id> %s' % command)
                    fgerrit.publish_draft(change_id)
                elif command in ('abandon', 'abandoned'):
                    if arguments:
                        args.error('<id> %s' % command)
                    fgerrit.abandon_change(change_id)
                elif command in ('delete', 'deleted'):
                    if arguments:
                        args.error('<id> %s' % command)
                    fgerrit.delete_change(change_id)
                elif command in ('restore', 'restored'):
                    if arguments:
                        args.error('<id> %s' % command)
                    fgerrit.restore_change(change_id)
                else:
                    args.error('Unknown command %s' % command)


if __name__ == '__main__':
    cmd = GerritCMD()
    cmd.main()
